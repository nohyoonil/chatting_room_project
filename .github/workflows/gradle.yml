# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Grant execute permission for gradlew
      run: chmod +x chattingroom/gradlew
      
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: init gradle
      run: chattingroom/gradlew init

    #- name: Build with Gradle Wrapper
    #run: chattingroom/gradlew build
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v4
      with:
        arguments: build

    - name: build test
      run: ls chattingroom

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: cicdsample
        path: chatting_room_project/chattingroom/build/libs/*.jar

  deploy:
    needs: build
    
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: cicdsample
          
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
          
      - name: SCP transfer
        run: scp *.jar ${{ secrets.USER }}@${{ secrets.HOST }}:~/cicd
      - name: Execute remote commands
        run: |
          ssh ${{ secrets.USER }}@${{ secrets.HOST }} "sudo fuser -k 8080/tcp || true"
          ssh ${{ secrets.USER }}@${{ secrets.HOST }} "sudo nohup /usr/bin/java -jar ~/cicd/*.jar &"
  
